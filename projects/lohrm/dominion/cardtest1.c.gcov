        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function test_smithy called 1 returned 100% blocks executed 82%
        1:    8:void test_smithy(){
        -:    9:
        -:   10:	struct gameState state;
        -:   11:
        1:   12:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   13:
        1:   14:	initializeGame(2, k, 1, &state);
call    0 returned 100%
        -:   15:	
        1:   16:	int currentPlayer = whoseTurn(&state);
call    0 returned 100%
        1:   17:	int original_deck = state.deckCount[currentPlayer];
        1:   18:	int original_hand = state.handCount[currentPlayer];
        1:   19:	int original_played = state.playedCardCount;
        1:   20:	state.hand[currentPlayer][0] = smithy;
        -:   21:
        1:   22:	printf("Testing Smithy:\n");
call    0 returned 100%
        -:   23:
        1:   24:	cardEffect(smithy, 0, 0, 0, &state, 0, NULL);
call    0 returned 100%
        -:   25:	// TEST 1
        1:   26:	printf("   TEST 1: 3 cards were taken from the deck\n");
call    0 returned 100%
        1:   27:	if(state.deckCount[currentPlayer] == original_deck-3){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   28:		printf("\tPASS - 3 cards were taken\n");
call    0 returned 100%
        -:   29:	}
        -:   30:	else{
    #####:   31:		printf("\tFAIL - 3 cards were not taken\n");
call    0 never executed
        -:   32:	}
        -:   33:	// TEST 2
        1:   34:	printf("   TEST 2: 3 cards were added to the player's hand, and the played card was discarded\n");
call    0 returned 100%
        1:   35:	if(state.handCount[currentPlayer] == original_hand+2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   36:		printf("\tPASS - 3 cards were added and smithy was discarded\n");
call    0 returned 100%
        -:   37:	}
        -:   38:	else{
    #####:   39:		printf("\tFAIL - 3 cards were not added and smithy was not discarded\n");
call    0 never executed
        -:   40:	}
        -:   41:	// TEST 3
        1:   42:	printf("   TEST 3: Smity card was added to played cards deck\n");
call    0 returned 100%
        1:   43:	if(state.playedCardCount == original_played+1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   44:		printf("\tPASS - Smithy card was added to played cards deck\n");
call    0 never executed
        -:   45:	}
        -:   46:	else{
        1:   47:		printf("\tFAIL - Smithy card was trashed\n");
call    0 returned 100%
        -:   48:	}
        1:   49:}
        -:   50:
function main called 1 returned 100% blocks executed 100%
        1:   51:int main(){
        -:   52:
        1:   53:	test_smithy();
call    0 returned 100%
        -:   54:
        1:   55:	return 0;
        -:   56:
        -:   57:}
