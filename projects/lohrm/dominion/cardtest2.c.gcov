        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function test_adventurer called 1 returned 100% blocks executed 65%
        1:    8:void test_adventurer(){
        -:    9:
        -:   10:	struct gameState state;
        -:   11:
        1:   12:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   13:
        1:   14:	initializeGame(2, k, 1, &state);
call    0 returned 100%
        -:   15:	
        -:   16:	int i;
        -:   17:
        1:   18:	int currentPlayer = whoseTurn(&state);
call    0 returned 100%
        1:   19:	int original_discard = state.discardCount[currentPlayer];
        1:   20:	int fail = 0;
        1:   21:	int original_hand = state.handCount[currentPlayer];
        1:   22:	state.hand[currentPlayer][0] = smithy;
        -:   23:
        1:   24:	printf("Testing Adventurer:\n");
call    0 returned 100%
        -:   25:
        1:   26:	cardEffect(adventurer, 0, 0, 0, &state, 0, NULL);
call    0 returned 100%
        -:   27:	// TEST 1
        1:   28:	printf("   TEST 1: Player's hand only increases by 2\n");
call    0 returned 100%
        1:   29:	if(state.handCount[currentPlayer] == original_hand+2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   30:		printf("\tPASS - 2 cards were added to player's hand\n");
call    0 returned 100%
        -:   31:	}
        -:   32:	else{
    #####:   33:		printf("\tFAIL - 2 cards were not added to player's hand\n");
call    0 never executed
        -:   34:	}
        -:   35:	// TEST 2
        1:   36:	printf("   TEST 2: No treasure cards were discarded when drawn\n");
call    0 returned 100%
        1:   37:	for(i = original_discard; i < state.discardCount[currentPlayer]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   38:		if(((state.discard[currentPlayer][i]) == copper) || ((state.discard[currentPlayer][i]) == silver) || ((state.discard[currentPlayer][i]) == gold)){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   39:			printf("\tFAIL - Treasure cards were discarded\n");
call    0 never executed
    #####:   40:			fail = 1;
    #####:   41:			break;
        -:   42:		}
        -:   43:	}
        1:   44:	if(fail == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   45:		printf("\tPASS - Treasure cards were not discarded\n");
call    0 returned 100%
        -:   46:	}
        1:   47:	fail = 0;
        -:   48:
        -:   49:	// TEST 3
        1:   50:	printf("   TEST 3: Only treasure cards were added to player's hand\n");
call    0 returned 100%
        3:   51:	for(i = original_hand; i < state.handCount[currentPlayer]; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:   52:		if(((state.hand[currentPlayer][i]) != copper) && ((state.hand[currentPlayer][i]) != silver) && ((state.hand[currentPlayer][i]) != gold)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   53:			printf("\tFAIL - Non-treasure cards were added to player's hand\n");
call    0 never executed
    #####:   54:			fail = 1;
    #####:   55:			break;
        -:   56:		}
        -:   57:	}
        1:   58:	if(fail == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   59:		printf("\tPASS - Only treasure cards were added to player's hand\n");
call    0 returned 100%
        -:   60:	}
        1:   61:}
        -:   62:
function main called 1 returned 100% blocks executed 100%
        1:   63:int main(){
        -:   64:
        1:   65:	test_adventurer();
call    0 returned 100%
        -:   66:
        1:   67:	return 0;
        -:   68:
        -:   69:}
