        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function set_temp_hand called 2 returned 100% blocks executed 100%
        2:    8:void set_temp_hand(struct gameState *state, int currentPlayer){
        -:    9:
        -:   10:	int i;
        -:   11:	
        2:   12:	state->handCount[currentPlayer] = 5;
       12:   13:	for(i = 0; i < 5; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   14:		// Put copper, silver, gold, adventurer, and council_room in hand
       10:   15:		state->hand[currentPlayer][i] = i+4;
        -:   16:	}
        2:   17:}
        -:   18:
function test_discardCard called 1 returned 100% blocks executed 84%
        1:   19:void test_discardCard(){
        -:   20:
        -:   21:	struct gameState state;
        -:   22:
        1:   23:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   24:	int original_playedCardCount = state.playedCardCount;
        1:   25:	int original_lastCard = council_room;
        -:   26:
        1:   27:	initializeGame(2, k, 1, &state);
call    0 returned 100%
        -:   28:
        1:   29:	int currentPlayer = whoseTurn(&state);
call    0 returned 100%
        -:   30:
        1:   31:	set_temp_hand(&state, currentPlayer);
call    0 returned 100%
        -:   32:
        1:   33:	printf("Testing discardCard():\n");
call    0 returned 100%
        -:   34:
        1:   35:	printf("Discarding gold, handPos=2, from player's hand. The card is trashed\n");
call    0 returned 100%
        -:   36:	
        -:   37:	// TEST 1
        1:   38:	discardCard(2, currentPlayer, &state, 1);
call    0 returned 100%
        1:   39:	printf("   TEST 1: Card was not added to played cards pile\n");
call    0 returned 100%
        1:   40:	if(original_playedCardCount == state.playedCardCount){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   41:		printf("\tPASS - Card was not added to played cards pile\n");
call    0 returned 100%
        -:   42:	}
        -:   43:	else{
    #####:   44:		printf("\tFAIL - Card was added to played cards pile\n");
call    0 never executed
        -:   45:	}
        -:   46:
        -:   47:	// TEST 2
        1:   48:	printf("   TEST 2: Discarded card was replaced by last card in hand\n");
call    0 returned 100%
        1:   49:	if(state.hand[currentPlayer][2] == original_lastCard){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   50:		printf("\tPASS - Card was replaced by last card\n");
call    0 returned 100%
        -:   51:	}
        -:   52:	else{
    #####:   53:		printf("\tFAIL - Card was not replaced by last card\n");
call    0 never executed
        -:   54:	}
        -:   55:
        -:   56:	// TEST 3
        1:   57:	printf("Discarding council_room, last card in hand from player's hand. The card is trashed\n");
call    0 returned 100%
        1:   58:	set_temp_hand(&state, currentPlayer);
call    0 returned 100%
        1:   59:	discardCard(4, currentPlayer, &state, 1);
call    0 returned 100%
        1:   60:	printf("   TEST 3: Player's hand count is reduced\n");
call    0 returned 100%
        1:   61:	if(state.handCount[currentPlayer] < 5){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   62:		printf("\tPASS - Hand was reduced\n");
call    0 returned 100%
        -:   63:	}
        -:   64:	else{
    #####:   65:		printf("\tFAIL - Hand was not reduced\n");
call    0 never executed
        -:   66:	}
        -:   67:
        -:   68:	// TEST 4
        1:   69:	printf("Discarding copper, the only card in the player's hand. The card is not trashed\n");
call    0 returned 100%
        1:   70:	state.handCount[currentPlayer] = 1;
        1:   71:	state.hand[currentPlayer][0] = copper;
        1:   72:	discardCard(0, currentPlayer, &state, 0);
call    0 returned 100%
        1:   73:	printf("   TEST 4: The card was put in the played cards pile\n");
call    0 returned 100%
        1:   74:	if(state.playedCardCount > original_playedCardCount){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   75:		printf("\tPASS - The card was put in the played cards pile\n");
call    0 returned 100%
        -:   76:	}
        -:   77:	else{
    #####:   78:		printf("\tFAIL - The card was not put in the played cards pile\n");
call    0 never executed
        -:   79:	}
        -:   80:	
        -:   81:	// TEST 5
        1:   82:	printf("   TEST 5: The player's hand is empty\n");
call    0 returned 100%
        1:   83:	if(state.handCount[currentPlayer] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   84:		printf("\tPASS - The player's hand is empty\n");
call    0 returned 100%
        -:   85:	}
        -:   86:	else{
    #####:   87:		printf("\tFAIL - The player's hand is not empty\n");
call    0 never executed
        -:   88:	}
        1:   89:}
        -:   90:
function main called 1 returned 100% blocks executed 100%
        1:   91:int main(){
        -:   92:
        1:   93:	test_discardCard();
call    0 returned 100%
        -:   94:
        1:   95:	return 0;
        -:   96:
        -:   97:}
