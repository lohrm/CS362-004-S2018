        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function test_isGameOver called 1 returned 100% blocks executed 83%
        1:    8:void test_isGameOver(){
        -:    9:
        -:   10:	struct gameState state;
        -:   11:	
        1:   12:  	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   13:
        1:   14:	initializeGame(2, k, 1, &state);
call    0 returned 100%
        -:   15:
        1:   16:	printf("Testing isGameOver():\n");
call    0 returned 100%
        -:   17:	// TEST 1
        1:   18:	printf("   TEST 1: Initial card supply\n");
call    0 returned 100%
        1:   19:	if(isGameOver(&state) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   20:		printf("\tPASS - Game is not over\n");
call    0 returned 100%
        -:   21:	}
        -:   22:	else{
    #####:   23:		printf("\tFAIL - Game should not be over\n");
call    0 never executed
        -:   24:	}
        -:   25:	
        -:   26:	// TEST 2
        1:   27:	state.supplyCount[province] = 0;
        1:   28:	printf("   TEST 2: 0 Province cards\n");
call    0 returned 100%
        1:   29:	if(isGameOver(&state) == 1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   30:		printf("\tPASS - Game is over\n");
call    0 returned 100%
        -:   31:	}
        -:   32:	else{
    #####:   33:		printf("\tFAIL - Game should be over\n");
call    0 never executed
        -:   34:	}
        -:   35:
        -:   36:	// TEST 3
        1:   37:	state.supplyCount[province] = 1;
        1:   38:	state.supplyCount[mine] = 0;
        1:   39:	state.supplyCount[gold] = 0;
        1:   40:	printf("   TEST 3: 1 Province card, two decks empty\n");
call    0 returned 100%
        1:   41:	if(isGameOver(&state) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   42:		printf("\tPASS - Game is not over\n");
call    0 returned 100%
        -:   43:	}
        -:   44:	else{
    #####:   45:		printf("\tFAIL - Game should not be over\n");
call    0 never executed
        -:   46:	}
        -:   47:	
        -:   48:	// TEST 4
        1:   49:	state.supplyCount[smithy] = 0;
        1:   50:	printf("   TEST 4: 1 Province card, Three decks empty\n");
call    0 returned 100%
        1:   51:	if(isGameOver(&state) == 1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   52:		printf("\tPASS - Game is over\n");
call    0 returned 100%
        -:   53:	}
        -:   54:	else{
    #####:   55:		printf("\tFAIL - Game should be over\n");
call    0 never executed
        -:   56:	}
        1:   57:}
        -:   58:
function main called 1 returned 100% blocks executed 100%
        1:   59:int main(){
        -:   60:
        1:   61:	test_isGameOver();
call    0 returned 100%
        -:   62:
        1:   63:	return 0;
        -:   64:
        -:   65:}
